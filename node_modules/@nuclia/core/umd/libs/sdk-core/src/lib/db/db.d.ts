import { Observable } from 'rxjs';
import { AccountUsersPayload, FullAccountUser, IDb, INuclia, InviteAccountUserPayload, PendingInvitation } from '../models';
import { Account, AccountCreation, AccountModification, AccountStatus, KbIndex, LearningConfigurations, NUAClient, NUAClientPayload, PredictedToken, ProcessingPullResponse, ProcessingPushResponse, ProcessingStat, StatsPeriod, StatsRange, StatsType, Welcome } from './db.models';
import type { EventList, IKnowledgeBoxItem, KnowledgeBoxCreation } from './kb';
import { IStandaloneKb, WritableKnowledgeBox } from './kb';
import { FileWithMetadata } from './upload';
/** Allows you to access Nuclia accounts and/or Nuclia Knowledge Boxes. */
export declare class Db implements IDb {
    private nuclia;
    constructor(nuclia: INuclia);
    /** Returns a list of all the accounts which are accessible for the current authenticated user. */
    getAccounts(): Observable<Account[]>;
    /**
     * Returns a list of all the KB indexes (account id, kb id, zone id) for the provided account slug.
     * @param accountSlug
     */
    getKbIndexes(accountSlug: string): Observable<KbIndex[]>;
    /** Creates a new account. */
    createAccount(account: AccountCreation): Observable<Account>;
    /**
     * Modifies account properties.
     *
     * Example:
      ```ts
      nuclia.db.modifyAccount('my-account', { title: 'My account' }).subscribe({
        next: () => {
          console.log('account modified');
        },
        error: (error) => {
          console.error(error);
        },
      });
      ```
    */
    modifyAccount(accountSlug: string, data: AccountModification): Observable<void>;
    /** Deletes an account. */
    deleteAccount(accountSlug: string): Observable<void>;
    /**
     * Returns account status.
     *
     * Example:
      ```ts
      nuclia.db
        .getAccountStatus('my-account')
        .pipe(filter((status) => status.available))
        .subscribe((status) => {
          console.log('account ready');
        });
      ```
     */
    getAccountStatus(accountSlug: string): Observable<AccountStatus>;
    /**
     * Returns user information.
     *
     * Example:
      ```ts
      nuclia.db.getWelcome().subscribe((welcome) => {
        console.log(`Welcome ${welcome.preferences.name}`);
      });
      ```
    */
    getWelcome(): Observable<Welcome>;
    /**
     * Returns the account with the given id or slug, or the one defined in the Nuclia options
     * if no id nor slug is provided.
     */
    getAccount(): Observable<Account>;
    getStandaloneKbs(): Observable<IStandaloneKb[]>;
    /**
     * Returns a list of all the Knowledge Boxes for the given account. Account slug and id can be provided in the Nuclia options or as parameters.
     */
    getKnowledgeBoxes(): Observable<IKnowledgeBoxItem[]>;
    getKnowledgeBoxes(accountSlug: string, accountId: string): Observable<IKnowledgeBoxItem[]>;
    /**
     * Returns the list of Knowledge Boxes for the given account id and zone.
     * @param accountId
     * @param zone
     */
    getKnowledgeBoxesForZone(accountId: string, zone: string): Observable<IKnowledgeBoxItem[]>;
    /**
     * Returns the Knowledge Box corresponding to the account id, Knowledge Box id and zone provided as parameters or the ones defined in the Nuclia options
     * if no parameters are provided.
     * Zone is mandatory except if the Knowledge Box is from a local NucliaDB instance.
     */
    getKnowledgeBox(): Observable<WritableKnowledgeBox>;
    getKnowledgeBox(accountId: string, knowledgeBoxId: string, zone?: string): Observable<WritableKnowledgeBox>;
    /**
     * Creates a new Knowledge Box.
     * Zone parameter is mandatory except if the Knowledge Box is from a local NucliaDB instance.
     * Example:
      ```ts
      const knowledgeBox = {
        slug: 'my-kb',
        title: 'My knowledge box',
      };
      nuclia.db.createKnowledgeBox('my-account-id', 'europe-1', knowledgeBox).subscribe((knowledgeBox) => {
        console.log('knowledge box', knowledgeBox);
      });
      ```
    */
    createKnowledgeBox(accountId: string, knowledgeBox: KnowledgeBoxCreation, zone?: string): Observable<WritableKnowledgeBox>;
    getStats(accountSlug: string, type: StatsType, knowledgeBox?: string, period?: StatsPeriod, utctime?: string): Observable<ProcessingStat[]>;
    /**
     * Uploads and pushes a file to Nuclia Understanding API.
     *
     * _Requires a NUA token._
     *
     * Example:
  
      ```ts
      const file = input.files[0];
      nuclia.db.upload(file).subscribe({
      next: (response) => {
        console.log('file uploaded', response);
      },
      error: (error) => {
        console.error(error);
      },
      });
      ```
     */
    upload(file: FileWithMetadata): Observable<ProcessingPushResponse>;
    /**
     * Pulls the latest data from Nuclia Understanding API.
     *
     * _Requires a NUA token._
     */
    pull(): Observable<ProcessingPullResponse>;
    getProcessingStats(range?: StatsRange, accountId?: string): Observable<ProcessingStat[]>;
    getNUAActivity(accountId: string, client_id: string, zoneSlug: string, pageIndex?: number): Observable<EventList>;
    getNUAClients(accountId: string): Observable<NUAClient[]>;
    getNUAClient(accountId: string, client_id: string, zone: string): Observable<NUAClient>;
    hasNUAClient(): boolean;
    getNUAKey(): string;
    getNUAHeader(): {
        'x-nuclia-nuakey': string;
    };
    /**
     * Creates a NUA client and a NUA token.
     * Zone parameter must be provided except when working with a local NucliaDB instance.
     * @param accountId Account identifier
     * @param data NUA client data
     */
    createNUAClient(accountId: string, data: NUAClientPayload): Observable<{
        client_id: string;
        token: string;
    }>;
    createNUAClient(accountId: string, data: NUAClientPayload, zone: string): Observable<{
        client_id: string;
        token: string;
    }>;
    /**
     *  Renews a NUA token.
     *  Zone parameter must be provided except when working with a local NucliaDB instance.
     */
    renewNUAClient(accountId: string, client_id: string): Observable<{
        client_id: string;
        token: string;
    }>;
    renewNUAClient(accountId: string, client_id: string, zone: string): Observable<{
        client_id: string;
        token: string;
    }>;
    /**
     * Deletes a NUA client.
     * Zone parameter must be provided except when working with a local NucliaDB instance.
     */
    deleteNUAClient(accountId: string, client_id: string): Observable<void>;
    deleteNUAClient(accountId: string, client_id: string, zone: string): Observable<void>;
    /**
     * Get learning configuration schema.
     * When used on Cloud account, this method is requiring account id and zone parameters.
     * When used on standalone, this method doesn't take any parameter
     */
    getLearningSchema(): Observable<LearningConfigurations>;
    getLearningSchema(accountId: string, zone: string): Observable<LearningConfigurations>;
    /**
     * Extract NER tokens from a text.
     */
    predictTokens(text: string): Observable<PredictedToken[]>;
    /**
     * Generate an answer from a question and a context.
     */
    predictAnswer(question: string, context: string[], model?: string): Observable<string>;
    /**
     * Generate a summary from a text.
     *
     * The optional `user_prompt` parameter allows you to provide a custom prompt to the model,
     * it must use the `{text}` placeholder to indicate where the resource text should be inserted
     * (example: 'Make a one-line summary of the following text: {text}').
     */
    predictSummarize(text: string, user_prompt?: string, model?: string, summary_kind?: 'simple' | 'extended'): Observable<string>;
    /**
     * Get an account user by their id
     * @param accountSlug
     * @param userId
     */
    getAccountUser(accountSlug: string, userId: string): Observable<Partial<FullAccountUser>>;
    /**
     * Get the list of all users of an account
     * @param accountSlug
     */
    getAccountUsers(accountSlug: string): Observable<FullAccountUser[]>;
    /**
     * Add and/or delete users from an account
     * @param accountSlug
     * @param users
     */
    setAccountUsers(accountSlug: string, users: AccountUsersPayload): Observable<void>;
    /**
     * Invite a user to an account
     * @param accountSlug
     * @param data
     */
    inviteToAccount(accountSlug: string, data: InviteAccountUserPayload): Observable<void>;
    /**
     * List pending account invitations
     * @param accountId
     */
    getAccountInvitations(accountId: string): Observable<PendingInvitation[]>;
    /**
     * Delete account invitation
     * @param accountId
     * @param email
     */
    deleteAccountInvitation(accountId: string, email: string): Observable<void>;
}
