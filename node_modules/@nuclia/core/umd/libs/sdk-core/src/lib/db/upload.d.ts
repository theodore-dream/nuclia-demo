import { Observable } from 'rxjs';
import type { INuclia } from '../models';
import type { ICreateResource } from './resource';
export interface UploadResponse {
    resource?: string;
    field?: string;
    progress?: number;
    failed?: boolean;
    completed?: boolean;
    conflict?: boolean;
}
export interface UploadStatus {
    files: FileUploadStatus[];
    progress: number;
    completed: boolean;
    uploaded: number;
    failed: number;
    conflicts?: number;
}
export interface FileUploadStatus {
    file: File;
    progress: number;
    uploaded: boolean;
    failed: boolean;
    conflicts?: boolean;
}
export interface FileWithMetadata extends File {
    lang?: string;
    md5?: string;
    payload?: ICreateResource;
}
export interface FileMetadata {
    lang?: string;
    contentType?: string;
    filename?: string;
    md5?: string;
    rslug?: string;
}
export declare const upload: (nuclia: INuclia, path: string, data: File | FileWithMetadata | ArrayBuffer, TUS: boolean, metadata?: FileMetadata) => Observable<UploadResponse>;
export declare const uploadFile: (nuclia: INuclia, path: string, buffer: ArrayBuffer, metadata?: FileMetadata) => Observable<UploadResponse>;
export declare const TUSuploadFile: (nuclia: INuclia, path: string, buffer: ArrayBuffer, metadata?: FileMetadata, creationPayload?: ICreateResource) => Observable<UploadResponse>;
export declare const batchUpload: (nuclia: INuclia, path: string, files: FileList | File[] | FileWithMetadata[], isResource?: boolean) => Observable<UploadStatus>;
export declare const uploadToProcess: (nuclia: INuclia, nuaKey: string, file: File, metadata?: FileMetadata) => Observable<string>;
export declare const getFileMetadata: (metadata: FileMetadata | undefined) => {
    [key: string]: string;
};
