import { KnowledgeBox } from './db';
import type { IAuthentication, IDb, INuclia, IRest, NucliaOptions, PromiseMapper } from './models';
import { Events } from './events';
export declare class Nuclia implements INuclia {
    options: NucliaOptions;
    /** Allows you to authenticate using username/password or using an API key. */
    auth: IAuthentication;
    /** Allows you to make authenticated REST requests to the Nuclia backend. */
    rest: IRest;
    /** Allows you to access and query the Nuclia database. */
    db: IDb;
    currentShards?: {
        [kb: string]: string[];
    };
    events: Events;
    private readKb?;
    /** The Nuclia global backend URL. */
    get backend(): string;
    /** The Nuclia regional backend URL. */
    get regionalBackend(): string;
    /**
     * Direct access to the current Knowledge Box instance
     * (it returns a Knowledge Box in read mode, and does not work with account authentication). */
    get knowledgeBox(): KnowledgeBox;
    /** Similar to `knowledgeBox`, but the returned object exposes `Promises` instead of RxJS `Observables`. */
    get asyncKnowledgeBox(): PromiseMapper<KnowledgeBox>;
    /**
     * Depending on your use case, you might want to:
     *
     * - Use the Nuclia SDK to access and manage a Nuclia account. In this case you will need to provide the `backend` and `account` options, and you will use **account authentication**.
     * - Use the Nuclia SDK to use a Nuclia Knowledge Box. In this case you will need to provide the `backend`, `knowledgeBox` and `zone` options. You will also either use **knowledge box authentication**, or **no authentication** if the Knowledge Box is public.
     *
     * Example:
  
      ```ts
      const nuclia = new Nuclia({
        backend: 'https://nuclia.cloud/api',
        knowledgeBox: '17815eb2-06a5-40ee-a5aa-b2f9dbc5da70',
        zone: 'europe-1',
      });
      ```
     */
    constructor(options: NucliaOptions);
}
