import { Observable } from 'rxjs';
import { JwtUser } from './jwt-helpers';
import type { IAuthentication, INuclia } from '../models';
import type { AuthTokens } from './auth.models';
/**
 * It manages authentication to the Nuclia backend.
 * It can be based on login/password for account authentication,
 * or on an API key for private Knowledge Box authentication.
 * Authentication is not necessary when using a public Knowledge Box.
 */
export declare class Authentication implements IAuthentication {
    private nuclia;
    private _isAuthenticated;
    private timerSubscription?;
    constructor(nuclia: INuclia);
    /**
     * Returns the authentication header (which will be `Authorization` for account authentication, or `X-NUCLIA-SERVICEACCOUNT` for private Knowledge Box authentication).
     *
     * Example:
      ```ts
      const headers = nuclia.auth.getAuthHeaders();
      ```
     */
    getAuthHeaders(): {
        [key: string]: string;
    };
    getAuthHeaders(method: string, path: string): {
        [key: string]: string;
    };
    private getNucliaDbRole;
    /**
     * Emits when the authentication status changes.
     *
     * Example:
      ```ts
      nuclia.auth.isAuthenticated().subscribe((isAuthenticated) => {
        if (isAuthenticated) {
          console.log('You are authenticated');
        } else {
          console.log('You are not authenticated');
        }
      });
      ```
     */
    isAuthenticated(): Observable<boolean>;
    /**
     * Returns an `Observable` emitting when the user has logged out.
     *
     * Example:
      ```ts
      nuclia.auth.hasLoggedOut().subscribe((loggedOut) => {
        if (loggedOut) {
          // do something
        }
      });
      ```
     */
    hasLoggedOut(): Observable<boolean>;
    /**
     * Calls the login endpoint for account authentication and emits when done.
     *
     * It can optionally take a reCaptcha validation code if the Nuclia backend requires it.
     * Once authenticated, the Nuclia SDK will periodically refresh the token before it expires.
     *
     * Example:
      ```ts
      nuclia.auth.login(username, password).subscribe({
        next: (success) => {
          this.loginError = success ? '' : 'Error';
          console.log('logged in', success);
        },
        error: (error) => {
          this.loginError = 'Error';
          console.error(error);
        },
        complete: () => {
          this.pending = false;
        },
      });
      ```
     */
    login(username: string, password: string, validation?: string): Observable<boolean>;
    /**
     * Returns a boolean if successful. Stores authentication tokens in localStorage and triggers `isAuthenticated`.
     *
     * This method is automatically called when using `login` and can be useful when using a custom authentication flow.
     *
     * Example:
        ```ts
        nuclia.auth.authenticate(tokens);
        ```
     */
    authenticate(tokens: AuthTokens): boolean;
    /** Calls the logout endpoint and removes the token stored in localStorage. */
    logout(): void;
    refresh(): Observable<boolean>;
    /** Returns authentication token stored in localStorage. */
    getToken(force?: boolean): string;
    /**
     * Sets the current userâ€™s password.
     *
     * Example:
      ```ts
      nuclia.auth.setPassword(password).subscribe({
        next: (success) => {
          this.passwordError = success ? '' : 'Error';
          console.log('password set', success);
        },
        error: (error) => {
          this.passwordError = 'Error';
          console.error(error);
        },
        complete: () => {
          this.pending = false;
        },
      });
      ```
     */
    setPassword(password: string): Observable<boolean>;
    /**
     * Deletes current user account and removes stored tokens.
     *
     * Example:
      ```ts
      nuclia.auth.deleteAuthenticatedUser().subscribe(() => {
        console.log('User deleted');
      });
      ```
     */
    deleteAuthenticatedUser(): Observable<void>;
    /**
     * Parses JWT token and returns corresponding user information.
     *
     * Example:
      ```ts
      const user = nuclia.auth.getJWTUser();
      console.log(`Hello ${user?.ext.first_name}!`);
      ```
     */
    getJWTUser(): JwtUser | null;
    /** Returns refresh token stored in localStorage. */
    getRefreshToken(): string;
    private storeTokens;
    private checkTokenExpiration;
    private fetch;
}
